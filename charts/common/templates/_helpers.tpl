{{/* vim: set filetype=mustache: */}}
 {{/*
Expand the name of the chart.
*/}}
{{- define "common.name" -}}
{{- default $.Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
{{- end }}

{{/*
Create a default fully qualified app name.
We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).
If release name contains chart name it will be used as a full name.
*/}}
{{- define "common.fullname" -}}
{{- if .Values.fullnameOverride }}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- $name := "" -}}
{{- if contains $name .Release.Name }}
{{- .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}
{{- end }}
{{- end }}
{{- end }}

{{- define "common.chart" -}}
{{- printf "%s-%s" $.Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
{{- end }}

{{- define "common.app" -}}
{{- default $.Chart.Name .Values.appOverride | trunc 63 | trimSuffix "-" }}
{{- end }}

{{- define "common.standard.labels" -}}
{{- include "common.standard.short_labels" . }}
chart: {{ template "common.chart" . }}
heritage: {{ .Release.Service }}
{{- end }}

{{- define "common.standard.short_labels" -}}
app: {{ template "common.app" . }}
release: {{ .Release.Name }}
{{- end }}

{{- define "common.conditional-init-genesis-container" -}}
{{- $production_envs := list "mainnet" "rc1" "baklava" "alfajores" -}}
{{- if not (has .Values.genesis.network $production_envs) -}}
{{- include "common.init-genesis-container" . }}
{{- end }}
{{- end }}

{{- define "common.init-genesis-container" -}}
{{- $network := ternary "rc1" .Values.genesis.network ( eq .Values.genesis.network "mainnet" ) -}}
{{- $genesisRenderURL := printf "https://www.googleapis.com/storage/v1/b/genesis_blocks/o/%s?alt=media" $network -}}
{{- $bootEnodeRenderURL := printf "https://storage.googleapis.com/env_bootnodes/%s" $network -}}
{{- $gensisFinalURL := default $genesisRenderURL .Values.genesis.genesisForceUrl }}
- name: init-genesis
  image: {{ .Values.geth.image.repository }}:{{ .Values.geth.image.tag }}
  imagePullPolicy: {{ .Values.geth.image.imagePullPolicy }}
  command:
  - /bin/sh
  - -c
  args:
  - |
      mkdir -p /var/geth /root/.celo
      if [ "{{ .Values.genesis.useGenesisFileBase64 | default false }}" == "true" ]; then
        cp -L /var/geth/genesis.json /root/.celo/
      else
        wget --no-check-certificate -O /root/.celo/genesis.json "{{ $gensisFinalURL }}"
        {{- /*
        In case of testnet, we don't want to use the bootnodeEnode file, as it will be generated by celotool initContainer
        */}}
        {{- if ne .Chart.Name "testnet" }}
        wget --no-check-certificate -O /root/.celo/bootnodeEnode "{{ $bootEnodeRenderURL }}"
        {{- end }}
      fi
      # There are issues with running geth init over existing chaindata around the use of forks.
      # The case that this could cause problems is when a network is set up with Base64 genesis files & chaindata
      # as that could interfere with accessing bootnodes for newly created nodes.
      if [ "{{ .Values.geth.use_gstorage_data | default false }}" == "false" ]; then
        geth init /root/.celo/genesis.json
      fi
  volumeMounts:
  - name: data
    mountPath: /root/.celo
  {{- if eq (default .Values.genesis.useGenesisFileBase64 "false") "true" }}
  - name: config
    mountPath: /var/geth
  {{- end }}
{{- end }}

{{- define "common.import-geth-account-container" -}}
- name: import-geth-account
  image: {{ .Values.geth.image.repository }}:{{ .Values.geth.image.tag }}
  imagePullPolicy: {{ .Values.geth.image.imagePullPolicy }}
  command: ["/bin/sh"]
  args:
  - "-c"
  - |
    geth account import --password /root/.celo/account/accountSecret /root/.celo/pkey || true
  volumeMounts:
  - name: data
    mountPath: /root/.celo
  - name: account
    mountPath: "/root/.celo/account"
    readOnly: true
{{- end }}

{{- define "common.bootnode-flag-script" -}}
if [[ "{{ .Values.genesis.network }}" == "alfajores" || "{{ .Values.genesis.network }}" == "baklava" ]]; then
  BOOTNODE_FLAG="--{{ .Values.genesis.network }}"
elif [[ "{{ .Values.genesis.network }}" == "rc1" || "{{ .Values.genesis.network }}" == "mainnet" ]]; then
  BOOTNODE_FLAG="--mainnet"
else
  [ -f /root/.celo/bootnodeEnode ] && BOOTNODE_FLAG="--bootnodes=$(cat /root/.celo/bootnodeEnode) --networkid={{ .Values.genesis.networkId }}"
fi
{{- end }}

{{- define "common.full-node-container" -}}
- name: geth
  image: {{ .Values.geth.image.repository }}:{{ .Values.geth.image.tag }}
  imagePullPolicy: {{ .Values.geth.image.imagePullPolicy }}
  command:
  - /bin/sh
  - -c
  args:
  - |
    set -euo pipefail
    RID=$(echo $REPLICA_NAME | grep -Eo '[0-9]+$')
    NAT_FLAG=""
    if [[ ! -z $IP_ADDRESSES ]]; then
      NAT_IP=$(echo "$IP_ADDRESSES" | awk -v RID=$(expr "$RID" + "1") '{split($0,a,","); print a[RID]}')
    fi

    # Taking local ip for natting (probably this means pod cannot have incomming connection from external LAN peers)
    set +u
    if [[ -z $NAT_IP ]]; then
      if [[ -f /root/.celo/ipAddress ]]; then
        NAT_IP=$(cat /root/.celo/ipAddress)
      else
        NAT_IP=$(hostname -i)
      fi
    fi
    NAT_FLAG="--nat=extip:${NAT_IP}"
    set -u

    ADDITIONAL_FLAGS='{{ .geth_flags | default "" }}'
    if [[ -f /root/.celo/pkey ]]; then
      NODE_KEY=$(cat /root/.celo/pkey)
      if [[ ! -z ${NODE_KEY} ]]; then
        ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --nodekey=/root/.celo/pkey"
      fi
    fi
    {{- if .proxy | default false }}
    VALIDATOR_HEX_ADDRESS=$(cat /root/.celo/validator_address)
    ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --proxy.proxiedvalidatoraddress $VALIDATOR_HEX_ADDRESS --proxy.proxy --proxy.internalendpoint :30503"
    {{- end }}

    {{- if .proxied | default false }}
    ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --proxy.proxiedvalidatoraddress $VALIDATOR_HEX_ADDRESS --proxy.proxy --proxy.internalendpoint :30503"
    {{- end }}
    {{- if .unlock | default false }}
    ACCOUNT_ADDRESS=$(cat /root/.celo/address)
    ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --unlock=${ACCOUNT_ADDRESS} --password /root/.celo/account/accountSecret --allow-insecure-unlock"
    {{- end }}
    {{- if .expose }}
    {{- include  "common.geth-http-ws-flags" (dict "Values" $.Values "rpc_apis" (default "eth,net,web3,debug,txpool" .rpc_apis) "ws_port" (default .Values.geth.ws_port .ws_port ) "listen_address" "0.0.0.0") | nindent 4 }}
    {{- end }}
    {{- if .ping_ip_from_packet | default false }}
    ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --ping-ip-from-packet"
    {{- end }}
    {{- if .in_memory_discovery_table_flag | default false }}
    ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --use-in-memory-discovery-table"
    {{- end }}
    {{- if .proxy_allow_private_ip_flag | default false }}
    ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --proxy.allowprivateip"
    {{- end }}
    {{- if .ethstats | default false }}
    ACCOUNT_ADDRESS=$(cat /root/.celo/address)
    if grep -nri ${ACCOUNT_ADDRESS#0x} /root/.celo/keystore/ > /dev/null; then
      :
    {{- if .proxy | default false }}
      ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --etherbase=${ACCOUNT_ADDRESS}"
      [[ "$RID" -eq 0 ]] && ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --ethstats=${HOSTNAME}@{{ .ethstats }}"
    {{- else }}
    {{- if not (.proxied | default false) }}
      ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --ethstats=${HOSTNAME}@{{ .ethstats }}"
    {{- end }}
    {{- end }}
    fi
    {{- end }}

    {{- include  "common.geth-add-metrics-pprof-config" (dict "metrics" .Values.metrics "pprof" .Values.geth.pprof) | nindent 4 }}

    PORT=30303

    {{- if .ports }}
    PORTS_PER_RID={{ join "," .ports }}
    PORT=$(echo $PORTS_PER_RID | cut -d ',' -f $((RID + 1)))
    {{- end }}

    {{- include  "common.bootnode-flag-script" . | nindent 4 }}

    {{ default "# No extra setup" .extra_setup | nindent 4 | trim }}

    exec geth \
      --port $PORT \
      {{- $mainnet_envs := list "mainnet" "rc1" -}}
      {{- if not (has .Values.genesis.network $mainnet_envs) }}
      $BOOTNODE_FLAG \
      {{- end }}
      {{- $lightmodes := list "lightest" "light" -}}
      {{- if not (has .Values.geth.syncmode $lightmodes) }}
      --light.serve={{ if kindIs "invalid" .light_serve }}90{{ else }}{{ .light_serve }}{{ end }} \
      --light.maxpeers={{ if kindIs "invalid" .light_maxpeers }}1000{{ else }}{{ .light_maxpeers }}{{ end }} \
      {{- end }}
      --maxpeers={{ if kindIs "invalid" .maxpeers }}1200{{ else }}{{ .maxpeers }}{{ end }} \
      --nousb \
      --syncmode={{ .syncmode | default .Values.geth.syncmode }} \
      --gcmode={{ .gcmode | default .Values.geth.gcmode }} \
      --rpc.gascap={{ printf "%v" (default (int .Values.geth.rpc_gascap) (int .rcp_gascap)) }} \
      ${NAT_FLAG} \
      --consoleformat=json \
      --consoleoutput=stdout \
      --verbosity={{ .Values.geth.verbosity }} \
      --vmodule={{ .Values.geth.vmodule }} \
      --datadir=/root/.celo \
      --ipcpath=geth.ipc \
      --txlookuplimit {{ .Values.geth.txlookuplimit | default 0 }} \
      ${ADDITIONAL_FLAGS}
  env:
  - name: NETWORK_ID
    value: "{{ .Values.genesis.networkId }}"
  - name: IP_ADDRESSES
    value: "{{ join "," .ip_addresses }}"
  - name: REPLICA_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  {{- if .Values.aws }}
  - name: HOST_IP
    valueFrom:
      fieldRef:
        fieldPath: status.hostIP
  {{- end }}
  {{- include  "common.geth-prestop-hook" . | nindent 2 -}}
  {{/* TODO: make this use IPC */}}
  {{- if .expose }}
  readinessProbe:
    exec:
      command:
      - /bin/sh
      - "-c"
      - |
        {{- include "common.node-health-check" (dict "maxpeers" .maxpeers "light_maxpeers" .light_maxpeers ) | nindent 8 }}
    initialDelaySeconds: 20
    periodSeconds: 10
  {{- end }}
  ports:
  {{- if .ports }}
  {{- range $index, $port := .ports }}
  - name: discovery-{{ $port }}
    containerPort: {{ $port }}
    protocol: UDP
  - name: ethereum-{{ $port }}
    containerPort: {{ $port }}
  {{- end }}
  {{- else }}
  - name: discovery
    containerPort: 30303
    protocol: UDP
  - name: ethereum
    containerPort: 30303
  {{- end }}
  {{- if .expose }}
  - name: rpc
    containerPort: 8545
  - name: ws
    containerPort: {{ default .Values.geth.ws_port .ws_port }}
  {{- end }}
  {{- if .pprof }}
  - name: pprof
    containerPort: {{ .pprof_port }}
  {{- end }}
  {{- $resources := default .Values.geth.resources .resources -}}
  {{- with $resources }}
  resources:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  volumeMounts:
  - name: data
    mountPath: /root/.celo
  - name: data-shared
    mountPath: /data-shared
  {{- if .ethstats }}
  - name: account
    mountPath: /root/.celo/account
    readOnly: true
  {{- end }}
{{- end }}

{{- define "common.geth-prestop-hook" -}}
lifecycle:
  preStop:
    exec:
      command: ["/bin/sh","-c","killall -SIGTERM geth; while killall -0 geth; do sleep 1; done"]
{{- end }}

{{- define "common.geth-configmap" -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "common.fullname" . }}-geth-config
  labels:
    {{- include "common.standard.labels" .  | nindent 4 }}
data:
  networkid: {{ $.Values.genesis.networkId | quote }}
  {{- if eq (default $.Values.genesis.useGenesisFileBase64 "false") "true" }}
  genesis.json: {{ $.Values.genesis.genesisFileBase64 | b64dec | quote }}
  {{- end }}
{{- end }}

{{- define "common.celotool-full-node-statefulset-container" -}}
- name: get-account
  image: {{ .Values.celotool.image.repository }}:{{ .Values.celotool.image.tag }}
  imagePullPolicy: {{ .Values.celotool.image.imagePullPolicy }}
  command:
    - bash
    - "-c"
    - |
      [[ $REPLICA_NAME =~ -([0-9]+)$ ]] || exit 1
      RID=${BASH_REMATCH[1]}
      {{- if .proxy }}
      # To allow proxies to scale up easily without conflicting with keys of
      # proxies associated with other validators
      KEY_INDEX=$(( ({{ .validator_index }} * 10000) + $RID ))
      echo {{ .validator_index }} > /root/.celo/validator_index
      {{- else }}
      KEY_INDEX=$RID
      {{- end }}
      echo "Generating private key with KEY_INDEX=$KEY_INDEX"
      celotooljs.sh generate bip32 --mnemonic "$MNEMONIC" --accountType {{ .mnemonic_account_type }} --index $KEY_INDEX > /root/.celo/pkey
      echo "Private key $(cat /root/.celo/pkey)"
      echo 'Generating address'
      celotooljs.sh generate account-address --private-key $(cat /root/.celo/pkey) > /root/.celo/address
      {{- if .proxy }}
      # Generating the account address of the validator
      echo "Generating the account address of the validator {{ .validator_index }}"
      celotooljs.sh generate bip32 --mnemonic "$MNEMONIC" --accountType validator --index {{ .validator_index }} > /root/.celo/validator_pkey
      celotooljs.sh generate account-address --private-key `cat /root/.celo/validator_pkey` > /root/.celo/validator_address
      rm -f /root/.celo/validator_pkey
      {{- end }}
      echo -n "Generating IP address for node: "
      if [ -z $IP_ADDRESSES ]; then
        echo 'No $IP_ADDRESSES'
        # to use the IP address of a service from an env var that Kubernetes creates
        SERVICE_ENV_VAR_PREFIX={{ .service_ip_env_var_prefix }}
        if [ "$SERVICE_ENV_VAR_PREFIX" ]; then
          echo -n "Using ${SERVICE_ENV_VAR_PREFIX}${RID}_SERVICE_HOST:"
          SERVICE_IP_ADDR=`eval "echo \\${${SERVICE_ENV_VAR_PREFIX}${RID}_SERVICE_HOST}"`
          echo $SERVICE_IP_ADDR
          echo "$SERVICE_IP_ADDR" > /root/.celo/ipAddress
        else
          echo 'Using POD_IP'
          echo $POD_IP > /root/.celo/ipAddress
        fi
      else
        echo 'Using $IP_ADDRESSES'
        POD_IP_ADDRESS=$(echo $IP_ADDRESSES | cut -d '/' -f $((RID + 1)))
        if [ -z $POD_IP_ADDRESS ]; then
          echo 'Using Pod IP address'
          echo $(hostname -i) > /root/.celo/ipAddress
        else
          echo $POD_IP_ADDRESS > /root/.celo/ipAddress
        fi
      fi
      echo "/root/.celo/ipAddress"
      cat /root/.celo/ipAddress

      {{- if (or .Values.bootnode.enabled .Values.bootnode.ipAddress) }}
      echo -n "Generating Bootnode enode address for node: "
      celotooljs.sh generate public-key --mnemonic "$MNEMONIC" --accountType bootnode --index 0 > /root/.celo/bootnodeEnodeAddress

      cat /root/.celo/bootnodeEnodeAddress
      [[ "$BOOTNODE_IP_ADDRESS" == 'none' ]] && BOOTNODE_IP_ADDRESS=${{ .Release.Namespace | upper | replace "_" "-" }}_BOOTNODE_SERVICE_HOST

      echo "enode://$(cat /root/.celo/bootnodeEnodeAddress)@$BOOTNODE_IP_ADDRESS:30301" > /root/.celo/bootnodeEnode
      echo -n "Generating Bootnode enode for tx node: "
      cat /root/.celo/bootnodeEnode
      {{- end }}
  env:
  - name: POD_IP
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: status.podIP
  {{- if (or .Values.bootnode.enabled .Values.bootnode.ipAddress) }}
  - name: BOOTNODE_IP_ADDRESS
    value: "{{ default .Values.bootnode.defaultClusterIP .Values.bootnode.ipAddress }}"
  {{- end }}
  - name: REPLICA_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  - name: MNEMONIC
    valueFrom:
      secretKeyRef:
        name: {{ .secret_name | default (printf "%s-geth-account" (include "common.fullname" .)) }}
        key: {{ .mnemonic_key | default "mnemonic" }}
  - name: IP_ADDRESSES
    value: {{ .ip_addresses }}
  volumeMounts:
  - name: data
    mountPath: /root/.celo
{{- end }}

{{- define "common.node-health-check" -}}
function isReady {
  geth attach << EOF

    // Deployment configuration
    var maxpeers = {{ required "maxpeers is required" .maxpeers }}
    var lightpeers = {{ required "light_maxpeers is required"  .light_maxpeers }}

    // minimum peers to consider eth_syncing a good indicator for considering low chances of new block on chain
    // With current dial ratio a node will try to open connections to (maxpeers - lightpeers)/3 peers.
    // Consider 1/5 of (maxpeers - lightpeers) as reference value for peers, with a minimum of 5.
    var minPeers = (maxpeers - lightpeers) * 0.2
    if (minPeers > 30) {
      minPeers = 30
    } else if (minPeers < 5) {
      minPeers = 5
    }

    // last block max age in seconds
    var maxAge = 20

    // getLastBlockAge() returns chain lastBlock age in seconds
    function getLastBlockAge() {
      var lastBlock = web3.eth.getBlockByNumber(web3.eth.blockNumber)
      var blockTimestamp = parseInt(lastBlock.timestamp, 16)
      var now = Math.floor(Date.now() / 1000)
      return (now - blockTimestamp)
    }

    // isReady() determines if the node is ready to handle requests
    // Prints 'CELO BLOCKCHAIN IS READY' if the node is ready
    function isReady(maxAge, minPeers) {
      // If block was produced recently -> node is ready
      if (getLastBlockAge() <= maxAge) {
        return true
      }
      // First let's check if it's syncing. If node is syncing -> there is
      // peers with blocks ahead from local head -> not ready
      if (web3.eth.syncing) {
          return false
      }
      // If node is not syncing, lets check the peers
      if (web3.net.peerCount < minPeers) {
          // Not enough peers -> Node may have just started -> Not ready
          return false
      }
      // If peers > minPeers and not syncing -> We consider node as ready
      return true
    }

    if(isReady(maxAge, minPeers)) {
      console.log('CELO BLOCKCHAIN IS READY')
    }
EOF
}

# Check if scripts prints 'CELO BLOCKCHAIN IS READY' as readiness signal
isReady | grep 'CELO BLOCKCHAIN IS READY' >/dev/null
outputIsReady=$?
if [ $outputIsReady -eq 0 ]; then
  touch /data-shared/ready
  exit 0
else
  rm -f /data-shared/ready
  exit 1
fi
{{- end }}

{{- /*
* This template does not define ports that will be exposed
*/}}
{{- define "common.full-node-service-no-ports" -}}
kind: Service
apiVersion: v1
metadata:
  name: {{ template "common.fullname" $ }}-{{ .svc_name | default .node_name }}-{{ .index }}{{ .svc_name_suffix | default "" }}
  labels:
    {{- include "common.standard.labels" .  | nindent 4 }}
    component: {{ .component_label }}
spec:
  selector:
    app: {{ template "common.app" $ }}
    release: {{ $.Release.Name }}
    component: {{ .component_label }}
    {{- if .extra_selector }}
    {{- .extra_selector | nindent 4 }}
    {{- end }}
    statefulset.kubernetes.io/pod-name: {{ template "common.fullname" $ }}-{{ .node_name }}-{{ .index }}
  type: {{ .service_type }}
  {{- if .load_balancer_ip }}
  loadBalancerIP: {{ .load_balancer_ip }}
  {{- end }}
{{- end }}

{{/*
* Specifies an env var given a dictionary, the name of the desired value, and
* if it's optional. If optional, the env var is only given if the desired value exists in the dict.
*/}}
{{- define "common.env-var" -}}
{{- if or (not .optional) (hasKey .dict .value_name) }}
- name: {{ .name }}
  value: "{{ (index .dict .value_name) }}"
{{- end }}
{{- end }}

{{/*
* Annotations to indicate to the prometheus server that this node should be scraped for metrics
*/}}
{{- define "common.prometheus-annotations" -}}
{{- $pprof := .pprof | default dict -}}
prometheus.io/scrape: "true"
prometheus.io/path: "{{ $pprof.path | default "/debug/metrics/prometheus" }}"
prometheus.io/port: "{{ $pprof.port | default 6060 }}"
{{- end }}

{{- define "common.remove-old-chaindata" -}}
- name: remove-old-chaindata
  image: {{ .Values.geth.image.repository }}:{{ .Values.geth.image.tag }}
  imagePullPolicy: {{ .Values.geth.image.imagePullPolicy }}
  command: ["/bin/sh"]
  args:
  - "-c"
  - |
    if [ -d /root/.celo/celo/chaindata ]; then
      lastBlockTimestamp=$(timeout 600 geth console --maxpeers 0 --light.maxpeers 0 --syncmode full --txpool.nolocals --exec "eth.getBlock(\"latest\").timestamp")
      if [ $? -ne 0 ]; then
        echo "Cannot start geth to check the chain. Probably corrupted. Deleting the chain data..."
        rm -rf /root/.celo/celo/chaindata
      fi
      day=$(date +%s)
      diff=$(($day - $lastBlockTimestamp))
      # If lastBlockTimestamp is older than 20 days, pull the chaindata rather than using the current PVC.
      if [ "$diff" -gt 1728000 ]; then
        echo "Chaindata is more than 20 days out of date. Wiping existing chaindata."
        rm -rf /root/.celo/celo/chaindata
      else
        echo "Chaindata is less than 20 days out of date. Using existing chaindata."
      fi
    else
      echo No chaindata at all.
    fi
  volumeMounts:
  - name: data
    mountPath: /root/.celo
{{- end }}

{{/*
* Needs a serviceAccountName in the pod with permissions to access gstorage
*/}}
{{- define "common.gsutil-sync-data-init-container" -}}
- name: gsutil-sync-data
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
  imagePullPolicy: IfNotPresent
  command:
  - /bin/sh
  - -c
  args:
  - |
     if [ -d /root/.celo/celo/chaindata ]; then
       echo Using pre-existing chaindata
       exit 0
     fi
     mkdir -p /root/.celo/celo
     cd /root/.celo/celo
     {{- if .Values.geth.gstorage_lz4 | default "true" }}
     apt update && apt install -y lz4
     curl -L https://storage.googleapis.com/{{ .Values.geth.gstorage_data_bucket }}/chaindata-latest.tar.lz4 --output chaindata.tar.lz4
     lz4 -dc chaindata.tar.lz4 | tar -xvf -
     rm -f chaindata.tar.lz4
     {{- else }}
     curl -L https://storage.googleapis.com/{{ .Values.geth.gstorage_data_bucket }}/chaindata-latest.tar.gz --output chaindata.tar.gz
     tar -xzvf chaindata.tar.gz -C /root/.celo/celo
     rm -f chaindata.tar.gz
     {{- end }}
  volumeMounts:
  - name: data
    mountPath: /root/.celo
  resources:
    requests:
      cpu: "1"
      memory: 2Gi
{{- end }}

{{- define "common.geth-add-metrics-pprof-config" -}}
{{- if .metrics | default true }}
ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --metrics"
{{- end }}
{{- if (or .metrics .pprof.enabled) | default false }}
# Check the format of pprof cmd arguments
set +e
geth --help | grep 'pprof.port' >/dev/null
pprof_new_format=$?
set -e
if [ $pprof_new_format -eq 0 ]; then
  ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --pprof --pprof.port {{ .pprof.port | default "6060" }} --pprof.addr 0.0.0.0"
else
  ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --pprof --pprofport {{ .pprof.port | default "6060" }} --pprofaddr 0.0.0.0"
fi
{{- end }}
{{- end }}

{{- define "common.geth-http-ws-flags" -}}
# Check the format of http/rcp and ws cmd arguments
RPC_APIS={{ .rpc_apis | default "eth,net,web3,debug" | quote }}
WS_PORT="{{ .ws_port | default 8545 }}"
LISTEN_ADDRESS={{ .listen_address | default "0.0.0.0" | quote }}
set +e
geth --help | grep 'http.addr' >/dev/null
http_new_format=$?
set -e
if [ $http_new_format -eq 0 ]; then
  ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --http --http.addr $LISTEN_ADDRESS --http.api=$RPC_APIS --http.corsdomain='*' --http.vhosts=*"
  ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --ws --ws.addr $LISTEN_ADDRESS --ws.origins=* --ws.api=$RPC_APIS --ws.port=$WS_PORT --ws.rpcprefix=/"
else
  ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --rpc --rpcaddr $LISTEN_ADDRESS --rpcapi=$RPC_APIS --rpccorsdomain='*' --rpcvhosts=*"
  ADDITIONAL_FLAGS="${ADDITIONAL_FLAGS} --ws --wsaddr $LISTEN_ADDRESS --wsorigins=* --wsapi=$RPC_APIS --wsport=$WS_PORT"
fi
{{- end }}
