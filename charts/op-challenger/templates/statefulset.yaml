apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "op-challenger.fullname" . }}
  labels:
    {{- include "op-challenger.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "op-challenger.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "op-challenger.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.config.metrics.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.config.metrics.port }}"
        prometheus.io/path: "/metrics"
      {{- end }}
      labels:
        {{- include "op-challenger.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "op-challenger.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      {{- if .Values.init.contracts.enabled }}
      - name: contracts
        image: {{ .Values.init.contracts.image.repository }}:{{ .Values.init.contracts.image.tag }}
        imagePullPolicy: {{ .Values.init.contracts.image.pullPolicy | quote }}
        command:
        - /bin/sh
        - -c
        args:
        - |
          datadir=/data

          {{- range $filename, $url := .Values.init.contracts.urls }}
          while ! wget -qO $datadir/{{ $filename }} "{{ $url }}"; do
            echo "wget failed for {{ $filename }}, retrying..."
            sleep 5 # Wait for 5 seconds before retrying
          done
          {{- end }}

          DisputeGameFactoryProxy=$(cat $datadir/deployment-l1.json | grep DisputeGameFactoryProxy | cut -d'"' -f4)
          echo $DisputeGameFactoryProxy > $datadir/DisputeGameFactoryProxy
          echo "DisputeGameFactoryProxy: $DisputeGameFactoryProxy"
        volumeMounts:
        - name: data
          mountPath: /data
      {{- end }}
      {{- with .Values.initContainers }}
        {{- tpl (toYaml . | nindent 6) $ }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          command:
            - /bin/sh
            - -c
          args:
            - |
              [ -f /data/DisputeGameFactoryProxy ] && DisputeGameFactoryProxy=$(cat /data/DisputeGameFactoryProxy) || DisputeGameFactoryProxy={{ .Values.config.disputeGameFactoryProxy }}
              export OP_CHALLENGER_GAME_FACTORY_ADDRESS=$DisputeGameFactoryProxy

              exec op-challenger \
                --l1-eth-rpc="${OP_CHALLENGER_L1_ETH_RPC}" \
                --l1-beacon="${OP_CHALLENGER_L1_BEACON}" \
                --l2-eth-rpc="${OP_CHALLENGER_L2_ETH_RPC}" \
                --rollup-rpc="${OP_CHALLENGER_ROLLUP_RPC}" \
                --game-factory-address="${OP_CHALLENGER_GAME_FACTORY_ADDRESS}" \
                --game-window="${OP_CHALLENGER_GAME_WINDOW}" \
                --datadir="${OP_CHALLENGER_DATADIR}" \
                --trace-type="${OP_CHALLENGER_TRACE_TYPE}" \
                --cannon-bin="${OP_CHALLENGER_CANNON_BIN}" \
                --cannon-server="${OP_CHALLENGER_CANNON_SERVER}" \
                --cannon-prestate="${OP_CHALLENGER_CANNON_PRESTATE}" \
                --cannon-rollup-config="${OP_CHALLENGER_CANNON_ROLLUP_CONFIG}" \
                --cannon-l2-genesis="${OP_CHALLENGER_CANNON_L2_GENESIS}" \
                {{- if .Values.config.selectiveClaimResolution }}
                --selective-claim-resolution \
                {{- end }}
                {{- range $key, $value := .Values.config.txmgr }}
                {{- if kindIs "string" $value }}
                {{- if ne $value "" }}
                --txmgr.{{ $key | snakecase | replace "_" "-" }}={{ $value }} \
                {{- end }}
                {{- else }}
                --txmgr.{{ $key | snakecase | replace "_" "-" }}={{ default 0 $value }} \
                {{- end }}
                {{- end }}
                {{- if .Values.config.metrics.enabled }}
                --metrics.enabled \
                --metrics.addr=0.0.0.0 \
                --metrics.port={{ .Values.config.metrics.port }} \
                {{- end }}
                {{- if .Values.config.signer.enabled }}
                --signer.address={{ .Values.config.signer.address }} \
                --signer.endpoint={{ .Values.config.signer.endpoint }} \
                {{- if .Values.config.signer.tls.enabled }}
                {{- if .Values.config.signer.tls.certManager.enabled }}
                --signer.tls.ca="/certs/ca.crt" \
                --signer.tls.cert="/certs/tls.crt" \
                --signer.tls.key="/certs/tls.key" \
                {{- else }}
                --signer.tls.ca="/certs/{{ .Values.config.signer.tls.externalSecret.tlsSecretCaKey }}" \
                --signer.tls.cert="/certs/{{ .Values.config.signer.tls.externalSecret.tlsSecretCertKey }}" \
                --signer.tls.key="/certs/{{ .Values.config.signer.tls.externalSecret.tlsSecretKeyKey }}" \
                {{- end }}
                {{- else }}
                --signer.tls.ca="" \
                --signer.tls.cert="" \
                --signer.tls.key="" \
                {{- end }}
                {{- end }}
                {{- with .Values.extraArgs }}
                {{- range . }}
                {{- tpl (.) $ | nindent 16 }} \
                {{- end }}
                {{- end }}
          env:
          {{- if not .Values.config.signer.enabled }}
          - name: OP_CHALLENGER_PRIVATE_KEY
            valueFrom:
              secretKeyRef:
                name: {{ ternary (include "op-challenger.fullname" .) .Values.secrets.privateKey.secretName (not (empty .Values.secrets.privateKey.value)) }}
                key: {{ ternary "privateKey" .Values.secrets.privateKey.secretKey (not (empty .Values.secrets.privateKey.value)) }}
          {{- end }}
          - name: OP_CHALLENGER_L1_ETH_RPC
            valueFrom:
              secretKeyRef:
                name: {{ ternary (include "op-challenger.fullname" .) .Values.secrets.l1Url.secretName (not (empty .Values.secrets.l1Url.value)) }}
                key: {{ ternary "l1Url" .Values.secrets.l1Url.secretKey (not (empty .Values.secrets.l1Url.value)) }}
          - name: OP_CHALLENGER_L1_BEACON
            value: {{ .Values.config.l1Beacon }}
          - name: OP_CHALLENGER_L2_ETH_RPC
            value: {{ .Values.config.l2EthRPC }}
          - name: OP_CHALLENGER_ROLLUP_RPC
            value: {{ .Values.config.rollupRPC }}
          - name: OP_CHALLENGER_DATADIR
            value: /data
          - name: OP_CHALLENGER_TRACE_TYPE
            value: {{ .Values.config.traceType }}
          - name: OP_CHALLENGER_GAME_WINDOW
            value: {{ .Values.config.gameWindow }}
          - name: OP_CHALLENGER_CANNON_BIN
            value: /usr/local/bin/cannon
          - name: OP_CHALLENGER_CANNON_SERVER
            value: /usr/local/bin/op-program
          - name: OP_CHALLENGER_CANNON_PRESTATE
            value: /data/prestate.bin.gz
          - name: OP_CHALLENGER_CANNON_ROLLUP_CONFIG
            value: /data/rollup.json
          - name: OP_CHALLENGER_CANNON_L2_GENESIS
            value: /data/genesis.json
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: metrics
              containerPort: {{ .Values.services.metrics.port | default 7300 }}
              protocol: TCP
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            {{- if .Values.config.signer.tls.enabled }}
            - mountPath: "/certs"
              name: pki
              readOnly: true
            {{- end }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "op-challenger.fullname" . }}-data
        {{- if .Values.config.signer.tls.enabled }}
        - name: pki
          secret:
            secretName: {{ ternary (printf "%s-%s" (include "op-challenger.fullname" .) "tls" ) .Values.config.signer.tls.externalSecret.tlsSecretName .Values.config.signer.tls.certManager.enabled }}
        {{- end }}
      enableServiceLinks: {{ .Values.enableServiceLinks }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
      annotations:
        {{- toYaml .Values.persistence.annotations | nindent 8 }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
      storageClassName: {{ .Values.persistence.storageClass }}
